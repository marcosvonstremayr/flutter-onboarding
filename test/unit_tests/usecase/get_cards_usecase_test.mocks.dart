// Mocks generated by Mockito 5.3.0 from annotations
// in hearthstone_cards/test/unit_tests/usecase/get_cards_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hearthstone_cards/src/domain/entity/card_event.dart' as _i2;
import 'package:hearthstone_cards/src/domain/repository/card_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCardEvent_0 extends _i1.SmartFake implements _i2.CardEvent {
  _FakeCardEvent_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [CardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardRepository extends _i1.Mock implements _i3.CardRepository {
  MockCardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CardEvent> fetchFilteredCards(dynamic endpoint) =>
      (super.noSuchMethod(Invocation.method(#fetchFilteredCards, [endpoint]),
              returnValue: _i4.Future<_i2.CardEvent>.value(_FakeCardEvent_0(
                  this, Invocation.method(#fetchFilteredCards, [endpoint]))))
          as _i4.Future<_i2.CardEvent>);
  @override
  _i4.Future<_i2.CardEvent> fetchAllCards() => (super.noSuchMethod(
          Invocation.method(#fetchAllCards, []),
          returnValue: _i4.Future<_i2.CardEvent>.value(
              _FakeCardEvent_0(this, Invocation.method(#fetchAllCards, []))))
      as _i4.Future<_i2.CardEvent>);
}

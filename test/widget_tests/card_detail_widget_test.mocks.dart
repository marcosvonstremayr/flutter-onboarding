// Mocks generated by Mockito 5.3.0 from annotations
// in hearthstone_cards/test/widget_tests/card_detail_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:hearthstone_cards/src/config/notification_service/local_notification_service.dart'
    as _i2;
import 'package:hearthstone_cards/src/data/model/card_model.dart' as _i6;
import 'package:hearthstone_cards/src/domain/entity/card_event.dart' as _i5;
import 'package:hearthstone_cards/src/presentation/bloc/favorites_bloc/favorite_bloc.dart'
    as _i4;
import 'package:hearthstone_cards/src/presentation/bloc/favorites_bloc/favorites_list_bloc.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNotificationService extends _i1.Mock
    implements _i2.LocalNotificationService {
  MockLocalNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: _i3.Future<void>.value(),
      returnValueForMissingStub: _i3.Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> showNotification({int? id, String? title, String? body}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #showNotification, [], {#id: id, #title: title, #body: body}),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
}

/// A class which mocks [FavoritesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesBloc extends _i1.Mock implements _i4.FavoritesBloc {
  MockFavoritesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i5.CardEvent> getStream() =>
      (super.noSuchMethod(Invocation.method(#getStream, []),
              returnValue: _i3.Stream<_i5.CardEvent>.empty())
          as _i3.Stream<_i5.CardEvent>);
  @override
  _i3.Future<void> saveFavoriteCard(_i6.CardModel? card) => (super.noSuchMethod(
      Invocation.method(#saveFavoriteCard, [card]),
      returnValue: _i3.Future<void>.value(),
      returnValueForMissingStub: _i3.Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> isCardFavorite(_i6.CardModel? card) => (super.noSuchMethod(
      Invocation.method(#isCardFavorite, [card]),
      returnValue: _i3.Future<void>.value(),
      returnValueForMissingStub: _i3.Future<void>.value()) as _i3.Future<void>);
  @override
  void initialize() => super.noSuchMethod(Invocation.method(#initialize, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [FavoritesListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesListBloc extends _i1.Mock implements _i7.FavoritesListBloc {
  MockFavoritesListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i5.CardEvent> getStream() =>
      (super.noSuchMethod(Invocation.method(#getStream, []),
              returnValue: _i3.Stream<_i5.CardEvent>.empty())
          as _i3.Stream<_i5.CardEvent>);
  @override
  _i3.Future<void> getFavoriteCards() => (super.noSuchMethod(
      Invocation.method(#getFavoriteCards, []),
      returnValue: _i3.Future<void>.value(),
      returnValueForMissingStub: _i3.Future<void>.value()) as _i3.Future<void>);
  @override
  void initialize() => super.noSuchMethod(Invocation.method(#initialize, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

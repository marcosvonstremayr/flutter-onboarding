// Mocks generated by Mockito 5.3.0 from annotations
// in hearthstone_cards/test/widget_tests/favorites_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:hearthstone_cards/src/config/notification_service/local_notification_service.dart'
    as _i8;
import 'package:hearthstone_cards/src/domain/entity/card_event.dart' as _i7;
import 'package:hearthstone_cards/src/presentation/bloc/blocs.dart' as _i5;
import 'package:hearthstone_cards/src/presentation/bloc/cards_bloc/cards_bloc.dart'
    as _i2;
import 'package:hearthstone_cards/src/presentation/bloc/favorites_bloc/favorite_bloc.dart'
    as _i3;
import 'package:hearthstone_cards/src/presentation/bloc/favorites_bloc/favorites_list_bloc.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCardsBloc_0 extends _i1.SmartFake implements _i2.CardsBloc {
  _FakeCardsBloc_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFavoritesBloc_1 extends _i1.SmartFake implements _i3.FavoritesBloc {
  _FakeFavoritesBloc_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFavoritesListBloc_2 extends _i1.SmartFake
    implements _i4.FavoritesListBloc {
  _FakeFavoritesListBloc_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Blocs].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlocs extends _i1.Mock implements _i5.Blocs {
  MockBlocs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardsBloc get homePageBloc => (super.noSuchMethod(
          Invocation.getter(#homePageBloc),
          returnValue: _FakeCardsBloc_0(this, Invocation.getter(#homePageBloc)))
      as _i2.CardsBloc);
  @override
  _i3.FavoritesBloc get favoriteBloc =>
      (super.noSuchMethod(Invocation.getter(#favoriteBloc),
              returnValue:
                  _FakeFavoritesBloc_1(this, Invocation.getter(#favoriteBloc)))
          as _i3.FavoritesBloc);
  @override
  _i4.FavoritesListBloc get favoritesListBloc =>
      (super.noSuchMethod(Invocation.getter(#favoritesListBloc),
              returnValue: _FakeFavoritesListBloc_2(
                  this, Invocation.getter(#favoritesListBloc)))
          as _i4.FavoritesListBloc);
}

/// A class which mocks [FavoritesListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesListBloc extends _i1.Mock implements _i4.FavoritesListBloc {
  MockFavoritesListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i7.CardEvent> getStream() =>
      (super.noSuchMethod(Invocation.method(#getStream, []),
              returnValue: _i6.Stream<_i7.CardEvent>.empty())
          as _i6.Stream<_i7.CardEvent>);
  @override
  _i6.Future<void> getFavoriteCards() => (super.noSuchMethod(
      Invocation.method(#getFavoriteCards, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  void initialize() => super.noSuchMethod(Invocation.method(#initialize, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [LocalNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNotificationService extends _i1.Mock
    implements _i8.LocalNotificationService {
  MockLocalNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> showNotification({int? id, String? title, String? body}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #showNotification, [], {#id: id, #title: title, #body: body}),
              returnValue: _i6.Future<void>.value(),
              returnValueForMissingStub: _i6.Future<void>.value())
          as _i6.Future<void>);
}
